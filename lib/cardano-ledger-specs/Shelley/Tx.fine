module Tx where

import Address(Addr, Addr_rwd, Ix, Slot);
import Crypto.Abstract(VKey, Sig, ScriptHash, Script);
import Crypto(KeyHash_G);
import Delegation(DCert);
import PParams(Coin, Epoch, PParamsUpdate);
import Tx.Abstract(TxId, Metadatum, MetadataHash);

{-----------------------------------------------------------------------------
    Transactions
    Shelley spec, Figure 10
------------------------------------------------------------------------------}

-- Derived types

TxIn     = TxId × Ix; -- transaction input
TxOut    = Addr × Coin; -- transaction output
UTxO     = TxIn ↦ TxOut; -- unspent tx outputs
Wdrl     = Addr_rwd ↦ Coin; -- reward withdrawal
Metadata = ℕ ↦ Metadatum; -- metadata

-- Derived types (update system)

ProposedPPUpdates = KeyHash_G ↦ PParamsUpdate; -- proposed updates
Update            = ProposedPPUpdates × Epoch; -- update proposal

-- Transaction Types

TxBody =
    { txins    : ℙ TxIn  -- transaction inputs
    , txouts   : Ix ↦ TxOut  --  transaction outputs
    , txcerts  : DCert*  -- delegation certificates
    , txfee    : Coin  -- transaction fee
    , txttl    : Slot  -- time to live
    , txwdrls  : Wdrl  -- withdrawals
    , txup     : Update?  -- protocol parameter update
    , txMDhash : MetadataHash?  -- metadata hash
    };

TxWitness =
    { txwitsVKey   : VKey ↦ Sig  -- VKey witnesses
    , txwitsScript : ScriptHash ↦ Script  -- script witnesses
    };

Tx =
    { txbody    : TxBody  -- transaction body
    , txWitness : TxWitness --  transaction witnesses
    , txMD      : Metadata? --  metadata
    };
