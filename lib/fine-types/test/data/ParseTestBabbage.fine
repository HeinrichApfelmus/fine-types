{-----------------------------------------------------------------------------
    FineTypes parser test case
------------------------------------------------------------------------------}
module ParseTestBabbage where

import AbstractBabbage (Slot, Network, Addr, DCert
    , VKey , Sig, Hash28, Hash32, TxId ,Script^ph1, Update
    , Script_plc , Data,Tag,  AdaIDType, Metadatum);

Ix      = ℕ;

Coin    = ℕ;

ByteString = Bytes;

{-----------------------------------------------------------------------------
    Addresses
------------------------------------------------------------------------------}
Addr_rwd = Addr;


{-----------------------------------------------------------------------------
    Cryptographic definitions
    Shelley spec, Figure 2, filtered
------------------------------------------------------------------------------}

{-----------------------------------------------------------------------------
    Hashes
    Shelley spec, Section A.1 Hashing
------------------------------------------------------------------------------}

{-----------------------------------------------------------------------------
    Hashes
    Alonzo spec, Figure 21
------------------------------------------------------------------------------}
ScriptHash = Hash28;
KeyHash    = Hash28;
DataHash   = Hash32;

{-----------------------------------------------------------------------------
    Simple scripts
------------------------------------------------------------------------------}

{-----------------------------------------------------------------------------
    Protocol parameters
    Babbage spec, Figure 1
------------------------------------------------------------------------------}
ExUnits = ℕ × ℕ;

{-----------------------------------------------------------------------------
    Protocol parameters update
------------------------------------------------------------------------------}

{-----------------------------------------------------------------------------
    Plutus
    Alonzo Spec, Figure 2
------------------------------------------------------------------------------}
-- Abstract types
ScriptIntegrityHash = Hash32;       -- `script_data_hash` in babbage.cddl

-- Script types
Script^ph2 = Script_plc;
Script     = Script^ph1 ⊎ Script^ph2;
IsValid    = Bool;
Datum      = Data;
Redeemer   = Data;

-- Derived types
ValidityInterval = Slot? × Slot?;
-- TxOut -- defined in Babbage
RdmrPtr    = Tag × Ix;
ScriptHash = Hash28;                -- `scripthash` in babbage.cddl

{-----------------------------------------------------------------------------
    Value and Token Algebra
    Mary spec, Figure 3, filtered
------------------------------------------------------------------------------}
AssetName = ByteString;
PolicyID  = ScriptHash;
AssetID   = AdaIDType ⊎ (PolicyID × AssetName);
Quantity  = ℤ;
Value     = AssetID ↦0 Quantity;

{-----------------------------------------------------------------------------
    Transactions
    Shelley spec, Figure 10, filtered
------------------------------------------------------------------------------}
-- Abstract types
-- TxId -- defined elsewhere

-- Derived types
TxIn        = TxId × Ix;
UTxO        = TxIn ↦ TxOut;
Wdrl        = Addr_rwd ↦ Coin;
Metadata    = ℕ ↦ Metadatum;

{-----------------------------------------------------------------------------
    Transaction Body
    Babbage spec, Figure 1
------------------------------------------------------------------------------}
TxOut = Addr × Value × (Datum ⊎ DataHash)? × Script?;

TxBody =
  { spendInputs         : ℙ TxIn
  , collInputs          : ℙ TxIn
  , refInputs           : ℙ TxIn
  , txouts              : (Ix →∗ TxOut)
  , collRet             : TxOut?
  , txcoll              : Coin?
  , txcerts             : DCert*
  , mint                : Value
  , txfee               : Coin
  , txvldt              : ValidityInterval
  , txwdrls             : Wdrl
  , txUpdates           : Update?
  , reqSignerHashes     : ℙ KeyHash
  , scriptIntegrityHash : ScriptIntegrityHash?
  , txADhash            : AuxiliaryDataHash?
  , txnetworkid         : Network?
  };

{-----------------------------------------------------------------------------
    AuxiliaryData
    Mary spec, Figure 5, filtered
------------------------------------------------------------------------------}
AuxiliaryData =
  { scripts : ℙ Script
  , md      : Metadata?
  };

AuxiliaryDataHash = Hash32; -- `auxiliary_data_hash` in babbage.cddl

{-----------------------------------------------------------------------------
    Transaction and witness
    Alonzo spec, Figure 3, filtered
------------------------------------------------------------------------------}
TxWitness =
  { txwitsVKey : VKey ↦ Sig
  , txscripts  : ScriptHash ↦ Script
  , txdats     : DataHash ↦ Datum
  , txrdmrs    : RdmrPtr ↦ (Redeemer × ExUnits)
  };

Tx =
  { txbody        : TxBody
  , txwits        : TxWitness
  , isValid       : IsValid
  , auxiliaryData : AuxiliaryData?
  };
